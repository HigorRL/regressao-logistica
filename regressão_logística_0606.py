# -*- coding: utf-8 -*-
"""Regressão_Logística_0606

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K2uF4neZUZ3-zaQ8HgOpKES8ZDb18UXI
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
import seaborn as sn
import matplotlib.pyplot as plt

"""#*Cheating*

"""

df = pd.read_csv('cheating.csv')
df.head()

X = df[['refund', 'martialStatus', 'taxableIncome']]
y = df['cheat']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25,
                                                    random_state=0)

print(len(y_test))
print(len(y_train))

logistic_regression = LogisticRegression()
logistic_regression.fit(X_train, y_train)
y_pred = logistic_regression.predict(X_test)

confusion_matrix = pd.crosstab(y_test, y_pred, rownames=['Actual'],
                               colnames=['Predicted'])
sn.heatmap(confusion_matrix, annot=True)

print('Accuracy: ', metrics.accuracy_score(y_test, y_pred))

"""### Fazendo a Previsão"""

teste = {'refund': 0, 'martialStatus': 2, 'taxableIncome': 80}
dft = pd.DataFrame(data=teste, index=[0])
print(dft)
resultado = logistic_regression.predict(dft)
print(resultado)

np.exp(logistic_regression.coef_)

"""#*Diabetes*"""

df = pd.read_csv('diabetes.csv')
df.head()

X = df[['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',
        'BMI', 'DiabetesPedigreeFunction', 'Age']]
y = df['Outcome']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25,
                                                    random_state=0)
print(len(y_test))
print(len(y_train))

logistic_regression = LogisticRegression()
logistic_regression.fit(X_train, y_train)
y_pred = logistic_regression.predict(X_test)

confusion_matrix = pd.crosstab(y_test, y_pred, rownames=['Actual'],
                               colnames=['Predicted'])
sn.heatmap(confusion_matrix, annot=True)

print('Accuracy: ', metrics.accuracy_score(y_test, y_pred))

np.exp(logistic_regression.coef_)